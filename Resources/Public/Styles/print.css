/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
main {
  *zoom: 1; }
  main:before, main:after {
    content: '';
    display: table; }
  main:after {
    clear: both; }

.grid {
  *zoom: 1;
  padding: 30px;
  border: 2px solid #474747;
  border-radius: 7px; }
  .grid:before, .grid:after {
    content: '';
    display: table; }
  .grid:after {
    clear: both; }
  .grid > * {
    float: left; }
  .grid .width-1-of-2 {
    width: 50%; }
  .grid .check-job-families {
    width: 100%;
    max-width: 882px; }
  .grid .job-accordions {
    width: 100%;
    max-width: 502px;
    margin-top: 50px;
    padding-left: 0; }
  .grid.bubble-graphs {
    float: none;
    display: block;
    margin: -20px 0 0 -20px; }
    .grid.bubble-graphs > * {
      float: none;
      width: 100%;
      margin: 0 auto;
      padding: 20px 0 0 20px;
      page-break-after: always; }
      .grid.bubble-graphs > * > * {
        display: block;
        margin: 0 auto; }
  .grid .planning {
    width: 100%; }

/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* Reset */
* {
  margin: 0;
  padding: 0; }

html {
  font-size: 100.01%;
  background-color: #FFFFFF; }

body {
  height: 100.01%;
  background-color: #FFFFFF;
  color: #000000;
  font: .75em/1.5 "Arial", "Helvetica", sans-serif;
  -webkit-text-size-adjust: none; }

p {
  margin-bottom: 0.5em; }

ul, dl {
  list-style: none;
  margin-bottom: 0.5em; }

ol {
  margin-left: 20px;
  margin-bottom: 0.5em; }

dt {
  font-weight: 700; }

table {
  border-collapse: collapse; }

img {
  border: none;
  vertical-align: middle; }

h1, h2, h3, h4, h5, h6 {
  font-size: 1em; }

a {
  color: #435052;
  text-decoration: none;
  outline: none;
  cursor: pointer; }

a:hover {
  text-decoration: underline; }

textarea, input, select, option, optgroup, button {
  font: 1em "Arial", "Helvetica", sans-serif; }

button, [type="radio"], [type="checkbox"], [type="submit"], [type="button"], [type="reset"], label[for], select {
  cursor: pointer; }

input, select, textarea {
  outline: none; }

.clear {
  clear: both; }

html {
  overflow-y: scroll;
  height: 100%;
  min-height: 100%; }
  html.no-scroll {
    overflow-y: hidden !important; }

body {
  height: auto;
  min-height: 100%;
  padding-bottom: 20px;
  color: #761f36;
  font-family: "ff-tisa-sans-web-pro", sans-serif;
  font-size: 16px; }
  body * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    text-overflow: ellipsis;
    list-style: none; }

figure img {
  display: block;
  width: 100%; }

hr {
  border: solid #474747;
  border-width: 0 0 1px 0;
  clear: both;
  height: 0;
  margin: 20px 0; }

.container {
  *zoom: 1;
  width: auto;
  max-width: 768px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  position: relative;
  padding: 0; }
  .container:before, .container:after {
    content: '';
    display: table; }
  .container:after {
    clear: both; }

.container .page-break {
  page-break-after: always; }

.content .align-left {
  text-align: left !important; }

.content .align-center {
  text-align: center !important; }

.content .align-right {
  text-align: right !important; }

.content .align-justify {
  text-align: justify !important; }

.content .indent {
  margin-left: 2em; }

::-webkit-input-placeholder {
  color: rgba(67, 67, 67, 0.65); }

:-moz-placeholder {
  color: rgba(67, 67, 67, 0.65); }

::-moz-placeholder {
  color: rgba(67, 67, 67, 0.65); }

:-ms-input-placeholder {
  color: rgba(67, 67, 67, 0.65); }

.print-step {
  page-break-inside: avoid; }

@media (max-width: 767px) {
  .page-wrap {
    display: block !important; } }

.step-title {
  margin-top: 16px; }

h1 {
  line-height: 36px !important; }

.agenda {
  width: 70%;
  padding-right: 0 !important; }

.participants {
  width: 70%;
  padding-top: 32px;
  padding-left: 0 !important; }

a {
  text-decoration: none;
  color: #000;
  outline: 0; }
  a:hover {
    outline: 0;
    text-decoration: none; }
  a:active, a:focus {
    outline: 0; }

/* Default paragraph styles */
/* Default header styles */
h1, h2, h3, h4, h5, h6 {
  color: #761f36;
  font-family: "ff-tisa-sans-web-pro", sans-serif;
  font-style: inherit;
  font-weight: 400;
  line-height: inherit; }
  h1 small, h2 small, h3 small, h4 small, h5 small, h6 small {
    color: inherit; }

h1 {
  color: #761f36;
  font-size: 30px; }

h2 {
  color: #333;
  font-size: 18px;
  font-weight: 700; }

h3 {
  color: #333;
  font-size: 20px; }

h4 {
  font-size: 20px; }

h5 {
  font-size: 18px; }

h6 {
  font-size: 16px; }

blockquote {
  position: relative;
  padding: 20px 20px 20px 50px;
  border: 1px solid #dadada;
  border-width: 1px 0;
  font-style: italic; }
  blockquote:before {
    content: open-quote;
    position: absolute;
    top: 20px;
    left: 0;
    color: #761f36;
    font-size: 92px;
    font-style: normal;
    line-height: 72px; }

.text-bold {
  font-weight: 700; }

.text-italic {
  font-style: italic; }

.text-left {
  text-align: left; }

.text-center {
  text-align: center; }

.text-right {
  text-align: right; }

.text-uppercase {
  text-transform: uppercase; }

.text-lowercase {
  text-transform: lowercase; }

.text-hide {
  text-indent: -999em; }

.text-hide[class*="icon-"]:before {
  float: left;
  text-indent: 0; }

.error {
  color: #f04124 !important; }

/*
 * Fonts order:
 * eot svg woff ttf
 */
@font-face {
  font-family: 'Lato';
  src: url("../fonts/lato-regular-webfont.eot");
  src: url("../fonts/lato-regular-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/lato-regular-webfont.svg#latoregular") format("svg"), url("../fonts/lato-regular-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'icons';
  src: url("../fonts/icons.eot?bhk1ff");
  src: url("../fonts/icons.eot?bhk1ff#iefix") format("embedded-opentype"), url("../fonts/icons.woff2?bhk1ff") format("woff2"), url("../fonts/icons.ttf?bhk1ff") format("truetype"), url("../fonts/icons.woff?bhk1ff") format("woff"), url("../fonts/icons.svg?bhk1ff#icons") format("svg");
  font-weight: normal;
  font-style: normal; }

[class^="icon-"]:before, [class*=" icon-"]:before {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icons' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-calendar:before {
  content: "\e901"; }

.icon-check:before {
  content: "\e902"; }

.icon-checked:before {
  content: "\e903"; }

.icon-flag:before {
  content: "\e904"; }

.icon-info:before {
  content: "\e905"; }

.icon-print:before {
  content: "\e906"; }

.icon-burger:before {
  content: "\e900"; }

.old-browser {
  display: none; }

html.old-ie .old-browser {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 100;
  display: block;
  width: 100%;
  background: #fff; }
  html.old-ie .old-browser p {
    padding: 40px 20px;
    text-align: center;
    font-size: 30px; }

.mobile-version-info {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff; }
  .mobile-version-info p {
    position: absolute;
    top: 50%;
    left: 50%;
    color: #000;
    font-family: "ff-tisa-web-pro", serif;
    font-size: 40px;
    text-align: center;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }
  @media (min-width: 768px) {
    .mobile-version-info {
      display: none; } }

@media (max-width: 767px) {
  body {
    padding: 0; }
  .page-wrap {
    display: none; } }

.step-title {
  margin-bottom: 10px; }
  .step-title.with-button {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between; }
  .step-title .button-container {
    padding-top: 2px;
    color: #808080;
    font-size: 12px;
    font-weight: 700;
    text-transform: uppercase; }
  .step-title.space-bottom {
    margin-bottom: 42px; }

.step-subtitle {
  display: inline-block;
  margin-bottom: 23px;
  color: #333;
  font-size: 14px; }

.fields-name {
  margin-bottom: 25px; }

main {
  position: relative;
  z-index: 1; }

.knowledge {
  margin-top: 30px; }

.ajax-overlay {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 20000;
  width: 100%;
  height: 100%;
  background: url("../images/ajax-loader.gif") no-repeat 50% 50% rgba(0, 0, 0, 0.7); }

.remove-button {
  position: relative;
  display: inline-block;
  width: 32px;
  height: 32px;
  background: #c0c0c0;
  border-radius: 50%;
  color: transparent;
  font-size: 0;
  top: -5px; }
  .remove-button:before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 6px;
    background: #fff;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }

.field-action .remove-button {
  top: -5px; }

.radio-button-align .remove-button {
  top: -10px; }

.add-button {
  position: relative;
  display: inline-block;
  width: 32px;
  height: 32px;
  background: #c6007b;
  border-radius: 50%;
  color: transparent;
  font-size: 0; }
  .add-button:before, .add-button:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    background: #fff;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }
  .add-button:before {
    width: 20px;
    height: 6px; }
  .add-button:after {
    width: 6px;
    height: 20px; }

.field-action .add-button {
  top: -5px; }

.datepicker {
  text-align: center; }
  .datepicker form {
    display: inline-block; }

.datepicker-field {
  display: inline-block; }
  .datepicker-field:before {
    display: inline-block;
    margin-right: 13px;
    font-size: 32px;
    color: #333;
    vertical-align: middle; }

.datepicker-input {
  width: 150px !important; }

.main-table-container {
  overflow: hidden;
  background: #e6e6e6;
  border: 2px solid #474747;
  border-radius: 7px; }
  .main-table-container.padding {
    padding: 30px; }

.radio-row {
  display: table;
  width: 100%; }
  .radio-row .radio-container {
    display: table-cell;
    width: 1%;
    padding: 0 10px;
    text-align: center; }
    @media (max-width: 1023px) {
      .radio-row .radio-container {
        padding: 0 3px; } }
    @media print {
      .radio-row .radio-container {
        padding: 0 3px; }
        .radio-row .radio-container label {
          display: block; } }

.checkbox-input {
  display: table; }
  .checkbox-input .checkbox-container,
  .checkbox-input .input-container {
    display: table-cell;
    vertical-align: middle; }
  .checkbox-input .checkbox-container {
    padding-top: 24px; }
  .checkbox-input .field-name {
    display: block;
    font-size: 20px; }

.table-legend {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin: 54px -16px 0;
  color: #333;
  font-size: 12px; }
  .table-legend > * {
    padding: 0 16px; }

.productivity {
  padding: 50px 30px 70px;
  color: #333; }
  .productivity .name {
    font-size: 20px; }
  .productivity .separator {
    display: inline-block;
    padding: 0 28px;
    font-size: 20px; }
  .productivity .rating {
    color: #c6007b;
    font-family: "ff-tisa-web-pro", serif;
    font-size: 20px;
    font-weight: 700; }
  .productivity .info {
    color: #333;
    font-family: "ff-tisa-sans-web-pro", sans-serif;
    font-size: 18px;
    font-weight: 700; }
  .productivity p.info {
    margin-bottom: 50px; }
  .productivity + .productivity {
    border-top: 2px solid #474747; }

.radar-chart-container {
  position: relative;
  width: 100%;
  height: auto;
  padding-bottom: 81%; }

.radar-chart {
  position: absolute;
  top: 0;
  left: 0;
  width: 100% !important;
  height: 100% !important; }

.print-button {
  display: inline-block;
  color: transparent;
  font-size: 0;
  vertical-align: middle; }
  .print-button:before {
    color: #c0c0c0;
    font-size: 32px; }

.page-header {
  *zoom: 1;
  padding: 13px 0 14px;
  color: #000; }
  .page-header:before, .page-header:after {
    content: '';
    display: table; }
  .page-header:after {
    clear: both; }
  .page-header .header-logo {
    float: left; }

/*
 * Forms and form fields
 */
/* Input style */
label {
  cursor: pointer; }

input,
button,
select {
  font-family: "ff-tisa-sans-web-pro", sans-serif;
  vertical-align: middle;
  outline: none;
  border-radius: 0; }

textarea {
  border-radius: 0;
  vertical-align: top;
  outline: none;
  -webkit-appearance: none;
  background: none;
  border: 0;
  resize: none; }

button,
select,
label[for],
input[type="reset"],
input[type="radio"],
input[type="button"],
input[type="submit"],
input[type="checkbox"] {
  cursor: pointer; }

button[disabled],
select[disabled],
label[disabled][for],
input[disabled][type="reset"],
input[disabled][type="radio"],
input[disabled][type="button"],
input[disabled][type="submit"],
input[disabled][type="checkbox"] {
  cursor: default; }

input[type="search"] {
  box-sizing: border-box; }

input[type="text"],
input[type="email"],
input[type="search"],
input[type="number"],
input[type="date"],
input[type="url"],
input[type="password"],
.placeholder,
textarea {
  width: 100%;
  padding: 7px 10px;
  background: #fff;
  border: 2px solid #ccc;
  border-radius: 7px;
  color: #333;
  font-size: 20px;
  line-height: 30px;
  vertical-align: middle;
  outline: none; }
  input[type="text"]::-moz-placeholder,
  input[type="email"]::-moz-placeholder,
  input[type="search"]::-moz-placeholder,
  input[type="number"]::-moz-placeholder,
  input[type="date"]::-moz-placeholder,
  input[type="url"]::-moz-placeholder,
  input[type="password"]::-moz-placeholder,
  .placeholder::-moz-placeholder,
  textarea::-moz-placeholder {
    color: #ccc;
    font-style: italic;
    opacity: 1; }
  input[type="text"]:-ms-input-placeholder,
  input[type="email"]:-ms-input-placeholder,
  input[type="search"]:-ms-input-placeholder,
  input[type="number"]:-ms-input-placeholder,
  input[type="date"]:-ms-input-placeholder,
  input[type="url"]:-ms-input-placeholder,
  input[type="password"]:-ms-input-placeholder,
  .placeholder:-ms-input-placeholder,
  textarea:-ms-input-placeholder {
    color: #ccc;
    font-style: italic;
    opacity: 1; }
  input[type="text"]::-webkit-input-placeholder,
  input[type="email"]::-webkit-input-placeholder,
  input[type="search"]::-webkit-input-placeholder,
  input[type="number"]::-webkit-input-placeholder,
  input[type="date"]::-webkit-input-placeholder,
  input[type="url"]::-webkit-input-placeholder,
  input[type="password"]::-webkit-input-placeholder,
  .placeholder::-webkit-input-placeholder,
  textarea::-webkit-input-placeholder {
    color: #ccc;
    font-style: italic;
    opacity: 1; }

textarea {
  padding-bottom: 0; }

[readonly] {
  cursor: default; }

input[type="checkbox"] {
  position: absolute;
  visibility: hidden; }
  input[type="checkbox"] + label {
    position: relative;
    display: inline-block;
    min-height: 32px;
    padding-top: 6px;
    padding-left: 48px;
    color: #808080;
    font-size: 12px;
    font-weight: 700;
    text-transform: uppercase; }
    input[type="checkbox"] + label:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      display: inline-block;
      width: 28px;
      height: 28px;
      background: #fff;
      border: 2px solid #ccc;
      border-radius: 7px;
      vertical-align: middle;
      white-space: nowrap;
      cursor: pointer; }
    input[type="checkbox"] + label:after {
      content: '\e903';
      position: absolute;
      top: 8px;
      left: 8px;
      opacity: 0;
      color: #d6007f;
      font-family: 'icons';
      font-size: 12px; }
  input[type="checkbox"]:checked + label:after {
    opacity: 1; }

input[type="radio"] + label {
  padding-left: 2px;
  color: #333;
  font-size: 14px; }

.field label {
  display: inline-block;
  color: #808080;
  font-size: 12px;
  font-weight: 700;
  text-transform: uppercase; }

.field .field-name {
  display: block;
  font-size: 20px; }

table {
  width: 100%; }
  table th {
    font-weight: 400;
    text-align: left; }

.fake-table,
.main-table-container {
  background: none; }

.check-job-families table {
  position: relative; }
  .check-job-families table thead:after {
    content: '';
    position: absolute;
    width: 100%;
    height: 7px;
    margin-top: -10px; }
  .check-job-families table th {
    padding-bottom: 20px;
    font-weight: 400; }
    .check-job-families table th:not(:first-child) {
      padding-left: 10px; }
    .check-job-families table th:first-child {
      padding-left: 0; }
    .check-job-families table th:last-child {
      padding-left: 0;
      text-align: center; }
  .check-job-families table td {
    padding: 5px 30px 4px 0; }
    .check-job-families table td:last-child {
      padding-right: 0;
      text-align: center; }

.planning table + table {
  margin-top: 50px; }

.planning table th {
  font-weight: 700;
  vertical-align: top; }

.planning table td {
  padding: 10px;
  vertical-align: top; }

.planning table th,
.planning table td {
  padding: 10px;
  border: 1px solid #000; }

.wysiwyg {
  /*
 * Styles for WYSIWYG editors like TinyMCE or CKEditor
 */ }
  .wysiwyg * {
    color: #333;
    font-size: 18px;
    line-height: 1.5em; }
  .wysiwyg * + p,
  .wysiwyg * + dl,
  .wysiwyg * + h1,
  .wysiwyg * + h2,
  .wysiwyg * + h3,
  .wysiwyg * + h4,
  .wysiwyg * + h5,
  .wysiwyg * + h6,
  .wysiwyg * + ol,
  .wysiwyg * + ul,
  .wysiwyg * + table,
  .wysiwyg * + figure,
  .wysiwyg * + .csc-textpic,
  .wysiwyg * + .csc-text {
    margin-top: 18px; }
  .wysiwyg h2 + p,
  .wysiwyg h3 + p,
  .wysiwyg h4 + p,
  .wysiwyg h5 + p,
  .wysiwyg h6 + p {
    margin-top: 0; }
  .wysiwyg li {
    position: relative;
    padding-left: 38px; }
    .wysiwyg li:before {
      content: '';
      position: absolute;
      top: 12px;
      left: 0;
      width: 6px;
      height: 6px;
      background: #333;
      border-radius: 50%; }
      @media print {
        .wysiwyg li:before {
          border: 1px solid #333; } }
    .wysiwyg li ol,
    .wysiwyg li ul {
      margin-top: 0;
      margin-bottom: 0; }
  .wysiwyg ol > li {
    counter-increment: ordered-list; }
    .wysiwyg ol > li:before {
      content: counter(ordered-list);
      top: 0;
      padding: 0;
      background: none;
      color: #333; }
  .wysiwyg h1 {
    color: #761f36;
    font-size: 30px;
    font-weight: 400; }
  .wysiwyg h2 {
    font-size: 18px;
    font-weight: 600;
    line-height: 1.5em; }
  .wysiwyg h3 {
    font-size: 20px;
    font-weight: 400; }
  .wysiwyg h4 {
    font-size: 20px;
    font-weight: 400; }
  .wysiwyg h5 {
    font-size: 18px;
    font-weight: 400; }
  .wysiwyg h6 {
    font-size: 16px;
    font-weight: 400; }
  .wysiwyg dt {
    font-weight: 700; }
  .wysiwyg a {
    color: #c6007b;
    text-decoration: none; }
    .wysiwyg a:hover {
      color: #c6007b;
      text-decoration: underline; }
  .wysiwyg p, .wysiwyg li, .wysiwyg dl {
    font-family: "ff-tisa-web-pro", serif; }
  .wysiwyg img {
    display: inline-block;
    vertical-align: middle; }
  .wysiwyg img[style*="float:left"],
  .wysiwyg img[style*="float: left"] {
    padding-top: 20px;
    padding-right: 20px; }
  .wysiwyg img[style*="float:right"],
  .wysiwyg img[style*="float: right"] {
    padding-top: 20px;
    padding-left: 20px; }
  .wysiwyg figure img {
    display: block; }
  .wysiwyg figcaption {
    margin-top: 8px;
    margin-bottom: 16px; }
    .wysiwyg figcaption, .wysiwyg figcaption * {
      font-size: 12px;
      line-height: 1em; }
    .wysiwyg figcaption .copyright-hint:before {
      content: ' ';
      white-space: pre; }
  .wysiwyg .align-left {
    text-align: left !important; }
  .wysiwyg .align-center {
    text-align: center !important; }
  .wysiwyg .align-right {
    text-align: right !important; }
  .wysiwyg .align-justify {
    text-align: justify !important; }
  .wysiwyg .indent {
    margin-left: 2em; }

.agenda {
  padding-right: 16px; }
  .agenda > * {
    max-width: 580px; }

.participants {
  padding-left: 16px; }

.navigation {
  position: relative;
  margin-bottom: 43px;
  background: #c0c0c0; }
  .navigation:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 9px;
    background: #761f36; }
  .navigation:after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    z-index: 1;
    width: 100%;
    height: 6px;
    background: url("../images/navigation-line.png") repeat-x center bottom -2px; }
  .navigation ul {
    position: relative;
    z-index: 2;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
    width: 100%;
    height: 58px;
    margin-bottom: -2px; }
    @media (max-width: 1023px) {
      .navigation ul {
        display: none; } }
    .navigation ul li {
      position: relative;
      text-align: center;
      -webkit-box-flex: 1;
      -ms-flex-positive: 1;
      flex-grow: 1;
      width: 14.28571%; }
      .navigation ul li:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 5px;
        height: 100%; }
      .navigation ul li.active {
        background: url("../images/navigation-active.png") no-repeat;
        background-size: 100% 100%; }
    .navigation ul a {
      display: table;
      width: 100%;
      height: 58px;
      margin-top: 4px;
      color: #333;
      font-size: 14px; }
      .navigation ul a span {
        display: table-cell;
        width: 100%;
        height: 100%;
        padding: 0 25px;
        vertical-align: middle; }

@media (min-width: 1024px) {
  .mobile-navigation {
    display: none; } }

.navigation .jcf-select {
  display: block;
  margin: 20px auto; }

.step-buttons {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin: 30px -16px 0;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between; }
  .step-buttons > * {
    padding: 16px; }
    .step-buttons > *:first-child {
      -webkit-box-flex: 1;
      -ms-flex-positive: 1;
      flex-grow: 1; }
  .step-buttons.buttons-right {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end; }
    .step-buttons.buttons-right > *:first-child {
      -webkit-box-flex: 0;
      -ms-flex-positive: 0;
      flex-grow: 0; }
  .step-buttons.buttons-4 > *:first-child {
    -webkit-box-flex: 0;
    -ms-flex-positive: 0;
    flex-grow: 0; }
  .step-buttons.buttons-4 > *:nth-last-child(2) {
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    text-align: right; }

.field-action {
  position: absolute;
  top: 50%;
  right: 0;
  cursor: pointer;
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%); }
  .field-action.edit-element {
    top: auto;
    bottom: 0;
    -webkit-transform: none;
    transform: none; }

.element-list > li {
  position: relative;
  padding: 8px 20px 10px;
  border: 1px solid #646464;
  color: #434343; }
  .element-list > li:not(.example) + li {
    margin-top: 0;
    border-top-width: 0; }

.element-list input:not([type="radio"]):not([type="checkbox"]),
.element-list textarea {
  display: inline-block;
  width: 100%;
  height: auto;
  padding: 0;
  border: 0;
  background: transparent;
  color: #434343;
  font-size: 16px;
  resize: none; }

.element-list.big > li {
  position: relative;
  padding: 0 40px 0 42px;
  border: 0; }
  .element-list.big > li + li {
    margin-top: 8px; }

.element-list.big .element-container {
  position: relative;
  min-height: 70px;
  padding: 12px 25px 17px;
  border: 0;
  border-bottom: 1px solid #000; }

.element-list.big .field-action {
  top: auto;
  bottom: 4px;
  -webkit-transform: none;
  transform: none; }

.element-list.with-percent {
  max-width: 542px; }
  .element-list.with-percent li {
    position: relative;
    padding-right: 40px;
    padding-left: 0; }
    .element-list.with-percent li:before {
      content: none; }
  .element-list.with-percent .percent {
    position: absolute;
    top: 2px;
    right: 0; }

.element-list.with-percent.edit .element-container {
  *zoom: 1; }
  .element-list.with-percent.edit .element-container:before, .element-list.with-percent.edit .element-container:after {
    content: '';
    display: table; }
  .element-list.with-percent.edit .element-container:after {
    clear: both; }
  .element-list.with-percent.edit .element-container > * {
    float: left; }

.element-list.with-percent.edit input:not([type="number"]):not(.number-input),
.element-list.with-percent.edit textarea {
  width: calc(100% - 42px); }

.element-list + .element-list li:first-child {
  border-top: 0; }

.add-element-list {
  position: relative;
  margin-top: 66px;
  padding: 8px 40px 10px 20px;
  border: 1px solid #646464; }
  .add-element-list input,
  .add-element-list textarea {
    width: 100%;
    height: auto;
    padding: 0;
    border: 0;
    background: transparent;
    color: #434343;
    font-size: 16px;
    resize: none; }
  .add-element-list button {
    border: 0;
    background: none; }
  .add-element-list.with-percent {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    max-width: 542px;
    margin-top: 30px; }
    .add-element-list.with-percent input:not([type="number"]),
    .add-element-list.with-percent textarea {
      width: calc(100% - 42px); }
    .add-element-list.with-percent + p {
      margin-top: 20px; }
    .add-element-list.with-percent .input-percent {
      position: absolute;
      top: 20px;
      right: 40px; }

.input-percent {
  position: absolute;
  top: 20px;
  right: 0;
  width: 42px;
  font-size: 16px;
  text-overflow: clip; }
  .input-percent input[type=number]::-webkit-outer-spin-button,
  .input-percent input[type=number]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0; }
  .input-percent input[type=number] {
    font-size: 16px;
    -moz-appearance: textfield; }
  .input-percent .percent {
    position: absolute;
    top: 2px;
    left: 0; }

.title-percent .input-percent {
  height: 42px;
  margin-top: 0;
  line-height: 42px; }

.jobs-accumulated li + li {
  margin-top: 25px; }

.jobs-accumulated .rating {
  font-size: 20px;
  font-weight: 700; }

.jobs-accumulated input[type="checkbox"] + label {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding-top: 0;
  color: #333;
  font-family: "ff-tisa-web-pro", serif;
  font-size: 20px;
  font-weight: 400;
  text-transform: none; }
  .jobs-accumulated input[type="checkbox"] + label .separator {
    display: inline-block;
    margin: 0 12px; }
  .jobs-accumulated input[type="checkbox"] + label .rating {
    display: inline-block;
    margin-right: 5px;
    color: #c6007b;
    font-weight: 700;
    font-style: italic; }

.job-accordions .element-list.with-percent li {
  padding-right: 0; }

.ratings {
  *zoom: 1; }
  .ratings:before, .ratings:after {
    content: '';
    display: table; }
  .ratings:after {
    clear: both; }
  .ratings dl {
    *zoom: 1; }
    .ratings dl:before, .ratings dl:after {
      content: '';
      display: table; }
    .ratings dl:after {
      clear: both; }
  .ratings dt {
    clear: left;
    float: left;
    width: 150px;
    font-weight: 400; }
  .ratings dd {
    float: left;
    width: 360px;
    margin-bottom: 10px; }

.points {
  *zoom: 1;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }
  .points:before, .points:after {
    content: '';
    display: table; }
  .points:after {
    clear: both; }
  .points > * {
    float: left; }
  .points > * + * {
    margin-left: 5px; }
  .points .checked + label {
    background-position: -245px -35px; }
  .points input[type="radio"] + label:before {
    content: none; }

.rating-value {
  float: left;
  text-align: right; }
  .rating-value.min-value {
    width: 150px; }
  .rating-value.max-value {
    width: 390px; }

.participants-ratings {
  width: 100%;
  padding: 30px;
  border: 2px solid #474747;
  border-radius: 7px; }
  .participants-ratings .element-list {
    margin-top: 86px; }
  .participants-ratings .participant-ratings {
    position: relative;
    overflow: hidden;
    width: 100%;
    padding-left: 10px; }
  .participants-ratings .participant-rating {
    display: block !important;
    width: 100%;
    page-break-inside: avoid; }
    .participants-ratings .participant-rating h2 {
      margin-bottom: 25px; }
  .participants-ratings .participant-rating + .participant-rating {
    margin-top: 32px; }
  .participants-ratings.wide .participant-ratings-container {
    width: 100%; }

.sales-trend {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin-top: 10px; }
  .sales-trend > * {
    width: 50%; }
  .sales-trend li + li {
    margin-top: 15px; }
  .sales-trend .trend-values {
    display: none; }
    .sales-trend .trend-values:first-child {
      display: block; }

.rating-arrow {
  position: absolute;
  z-index: 2;
  right: 0; }
  .rating-arrow.prev-rating {
    top: 60px; }
    @media (max-width: 1024px) {
      .rating-arrow.prev-rating {
        top: 90px; } }
  .rating-arrow.next-rating {
    bottom: 0; }
    @media (max-width: 1024px) {
      .rating-arrow.next-rating {
        bottom: 20px; } }

.influence-rating {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: -10px 0 0 -10px; }
  .influence-rating > li {
    position: relative;
    padding: 10px 0 0 10px; }

.bubble-graph-container {
  width: 100%;
  padding: 0 10px; }

.bubble-graph {
  min-height: 600px;
  padding-left: 50px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }
  .bubble-graph .graph-title {
    margin: 10px 10px 20px;
    font-size: 20px;
    text-align: center; }
  .bubble-graph .graph {
    position: relative;
    width: 73%;
    height: 600px;
    margin-bottom: 80px;
    background: #fff;
    border: solid #c0c0c0;
    border-width: 0 0 3px 3px; }
  .bubble-graph .axis-x {
    position: absolute;
    top: 100%;
    right: 0;
    left: 0; }
    .bubble-graph .axis-x:before {
      content: '';
      position: absolute;
      top: 0;
      left: -30px;
      width: 30px;
      height: 0;
      border-top: 3px solid #c0c0c0; }
    .bubble-graph .axis-x:after {
      content: '';
      position: absolute;
      top: 2px;
      right: -8px;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 7.5px 0 7.5px 8px;
      border-color: transparent transparent transparent #c0c0c0;
      -webkit-transform: translateY(-50%);
      transform: translateY(-50%); }
    .bubble-graph .axis-x > * {
      position: absolute;
      top: 0;
      left: 0;
      display: inline-block;
      opacity: 0; }
      .bubble-graph .axis-x > *:before {
        content: '';
        position: absolute;
        top: 0;
        left: 50%;
        width: 1px;
        height: 5px;
        background: #000; }
      .bubble-graph .axis-x > *.step-0:before {
        margin-left: -1px; }
    .bubble-graph .axis-x .label {
      top: 13px;
      left: 15px;
      text-align: center;
      color: #333;
      font-size: 14px;
      opacity: 1; }
      .bubble-graph .axis-x .label:before {
        content: none; }
      .bubble-graph .axis-x .label.right {
        right: 0;
        left: auto; }
      .bubble-graph .axis-x .label.main {
        position: static;
        display: block;
        width: 100%;
        margin-top: 43px;
        color: #333;
        font-size: 18px;
        font-weight: 700;
        text-align: right; }
  .bubble-graph .axis-y {
    position: absolute;
    top: 0;
    right: 100%;
    bottom: 0; }
    .bubble-graph .axis-y:before {
      content: '';
      position: absolute;
      right: 0;
      bottom: -30px;
      width: 0;
      height: 30px;
      border-right: 3px solid #c0c0c0; }
    .bubble-graph .axis-y:after {
      content: '';
      position: absolute;
      top: -8px;
      right: 2px;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 0 7.5px 8px 7.5px;
      border-color: transparent transparent #c0c0c0 transparent;
      -webkit-transform: translateX(50%);
      transform: translateX(50%); }
    .bubble-graph .axis-y > * {
      position: absolute;
      top: 0;
      right: 0;
      display: block;
      padding-right: 8px;
      opacity: 0; }
      .bubble-graph .axis-y > *:before {
        content: '';
        position: absolute;
        top: 50%;
        right: 0;
        width: 5px;
        height: 1px;
        background: #000; }
    .bubble-graph .axis-y .label {
      top: 13px;
      right: 7px;
      padding-right: 0;
      color: #333;
      font-size: 14px;
      opacity: 1;
      -webkit-transform: translateY(-50%) rotate(-90deg);
      transform: translateY(-50%) rotate(-90deg); }
      .bubble-graph .axis-y .label:before {
        content: none; }
      .bubble-graph .axis-y .label.down {
        top: auto;
        right: 0;
        bottom: 15px; }
  .bubble-graph .grid-line {
    position: absolute;
    border-color: #e6e6e6 !important; }
  .bubble-graph .horizontal-grid {
    top: 50%;
    left: 0;
    width: 100%;
    height: 0;
    border-bottom: 1px solid; }
  .bubble-graph .vertical-grid {
    top: 0;
    left: 50%;
    width: 0;
    height: 100%;
    border-left: 1px solid; }
  .bubble-graph .squares-labels .label {
    position: absolute;
    top: 25%;
    width: 50%;
    padding: 10px;
    color: #c0c0c0;
    font-size: 18px;
    font-weight: 400;
    text-align: center;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }
    .bubble-graph .squares-labels .label:nth-child(1) {
      left: 25%; }
    .bubble-graph .squares-labels .label:nth-child(2) {
      left: 75%; }
    .bubble-graph .squares-labels .label:nth-child(3) {
      top: 75%;
      left: 25%; }
    .bubble-graph .squares-labels .label:nth-child(4) {
      top: 75%;
      left: 75%; }
  .bubble-graph .bubble {
    position: absolute;
    z-index: 1;
    width: 24px;
    height: 24px;
    background: #fff;
    border-radius: 50%;
    border: 1px solid #333;
    color: #333;
    font-size: 12px;
    line-height: 22px;
    text-align: center;
    cursor: default; }
    .bubble-graph .bubble.on-axis.hover:before, .bubble-graph .bubble.on-axis.hover:after, .bubble-graph .bubble.on-axis:hover:before, .bubble-graph .bubble.on-axis:hover:after {
      content: '';
      position: absolute;
      left: 50%;
      width: 0;
      height: 0;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%); }
    .bubble-graph .bubble.on-axis.hover:before, .bubble-graph .bubble.on-axis:hover:before {
      top: -7px;
      border-style: solid;
      border-width: 0 5px 5px 5px;
      border-color: transparent transparent #c6007b transparent; }
    .bubble-graph .bubble.on-axis.hover:after, .bubble-graph .bubble.on-axis:hover:after {
      bottom: -7px;
      border-style: solid;
      border-width: 5px 5px 0 5px;
      border-color: #c6007b transparent transparent transparent; }
    .bubble-graph .bubble.on-axis.hover span:before, .bubble-graph .bubble.on-axis.hover span:after, .bubble-graph .bubble.on-axis:hover span:before, .bubble-graph .bubble.on-axis:hover span:after {
      content: '';
      position: absolute;
      left: 50%;
      width: 10px;
      height: 2px;
      background: #fff;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%); }
    .bubble-graph .bubble.on-axis.hover span:before, .bubble-graph .bubble.on-axis:hover span:before {
      top: -2px; }
    .bubble-graph .bubble.on-axis.hover span:after, .bubble-graph .bubble.on-axis:hover span:after {
      bottom: -2px; }
  .bubble-graph .help-line {
    position: absolute;
    top: 0;
    z-index: 0;
    display: none;
    height: 100%; }
    .bubble-graph .help-line:before {
      content: '';
      position: absolute;
      top: 0;
      left: 50%;
      width: 2px;
      height: 100%;
      background: #c6007b;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%); }
  .bubble-graph .legend {
    position: absolute;
    top: 0;
    right: -37%;
    max-width: 35%; }
    .bubble-graph .legend .legend-name {
      color: #333;
      font-size: 14px;
      font-weight: 700; }
    .bubble-graph .legend .legend-item {
      color: #333;
      font-size: 14px;
      line-height: 40px; }
    .bubble-graph .legend .item-number {
      display: inline-block;
      width: 16px;
      height: 16px;
      margin-right: 16px;
      border-radius: 50%;
      color: #000;
      font-size: 10px;
      font-weight: 700;
      line-height: 14px;
      text-align: center; }

.introjs-overlay {
  position: absolute;
  z-index: 9000;
  background-color: #000;
  opacity: 0;
  background: radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.4) 0, rgba(0, 0, 0, 0.9) 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#66000000',endColorstr='#e6000000',GradientType=1);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
  transition: all 0.3s ease-out; }

.introjs-fixParent {
  z-index: auto !important;
  opacity: 1.0 !important;
  position: absolute !important;
  -webkit-transform: none !important;
  transform: none !important; }

.introjs-showElement,
tr.introjs-showElement > td,
tr.introjs-showElement > th {
  z-index: 9800 !important; }

.introjs-disableInteraction {
  z-index: 9800 !important;
  position: absolute; }

.introjs-relativePosition,
tr.introjs-showElement > td,
tr.introjs-showElement > th {
  position: relative; }

.introjs-helperLayer {
  position: absolute;
  z-index: 9500;
  background-color: #FFF;
  background-color: rgba(255, 255, 255, 0.9);
  border: 1px solid #777;
  border: 1px solid rgba(0, 0, 0, 0.5);
  border-radius: 4px;
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.4);
  transition: all 0.3s ease-out; }

.introjs-tooltipReferenceLayer {
  position: absolute;
  z-index: 10000000;
  background-color: transparent;
  transition: all 0.3s ease-out; }

.introjs-helperLayer *,
.introjs-helperLayer *:before,
.introjs-helperLayer *:after {
  -ms-box-sizing: content-box;
  -o-box-sizing: content-box;
  box-sizing: content-box; }

.introjs-helperNumberLayer {
  position: absolute;
  top: -16px;
  left: -16px;
  z-index: 9999999999 !important;
  padding: 2px;
  font-family: Arial, verdana, tahoma;
  font-size: 13px;
  font-weight: bold;
  color: white;
  text-align: center;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
  background: #ff3019;
  /* Old browsers */
  /* Chrome10+,Safari5.1+ */
  /* Chrome,Safari4+ */
  /* FF3.6+ */
  /* IE10+ */
  /* Opera 11.10+ */
  background: linear-gradient(to bottom, #ff3019 0%, #cf0404 100%);
  /* W3C */
  width: 20px;
  height: 20px;
  line-height: 20px;
  border: 3px solid white;
  border-radius: 50%;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff3019', endColorstr='#cf0404', GradientType=0);
  /* IE6-9 */
  filter: progid:DXImageTransform.Microsoft.Shadow(direction=135, strength=2, color=ff0000);
  /* IE10 text shadows */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4); }

.introjs-arrow {
  border: 5px solid white;
  content: '';
  position: absolute; }

.introjs-arrow.top {
  top: -10px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: white;
  border-left-color: transparent; }

.introjs-arrow.top-right {
  top: -10px;
  right: 10px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: white;
  border-left-color: transparent; }

.introjs-arrow.top-middle {
  top: -10px;
  left: 50%;
  margin-left: -5px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: white;
  border-left-color: transparent; }

.introjs-arrow.right {
  right: -10px;
  top: 10px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: transparent;
  border-left-color: white; }

.introjs-arrow.right-bottom {
  bottom: 10px;
  right: -10px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: transparent;
  border-left-color: white; }

.introjs-arrow.bottom {
  bottom: -10px;
  border-top-color: white;
  border-right-color: transparent;
  border-bottom-color: transparent;
  border-left-color: transparent; }

.introjs-arrow.left {
  left: -10px;
  top: 10px;
  border-top-color: transparent;
  border-right-color: white;
  border-bottom-color: transparent;
  border-left-color: transparent; }

.introjs-arrow.left-bottom {
  left: -10px;
  bottom: 10px;
  border-top-color: transparent;
  border-right-color: white;
  border-bottom-color: transparent;
  border-left-color: transparent; }

.introjs-tooltip {
  position: absolute;
  padding: 10px;
  background-color: white;
  min-width: 200px;
  max-width: 550px;
  border-radius: 3px;
  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.4);
  transition: opacity 0.1s ease-out; }

.introjs-tooltipbuttons {
  text-align: right;
  white-space: nowrap; }

/*
 Buttons style by http://nicolasgallagher.com/lab/css3-github-buttons/
 Changed by Afshin Mehrabani
*/
.introjs-button {
  position: relative;
  overflow: visible;
  display: inline-block;
  padding: 0.3em 0.8em;
  border: 1px solid #d4d4d4;
  margin: 0;
  text-decoration: none;
  text-shadow: 1px 1px 0 #fff;
  font: 11px/normal sans-serif;
  color: #333;
  white-space: nowrap;
  cursor: pointer;
  outline: none;
  background-color: #ececec;
  background-image: linear-gradient(#f4f4f4, #ececec);
  -webkit-background-clip: padding;
  -moz-background-clip: padding;
  -o-background-clip: padding-box;
  /*background-clip: padding-box;*/
  /* commented out due to Opera 11.10 bug */
  border-radius: 0.2em;
  /* IE hacks */
  zoom: 1;
  *display: inline;
  margin-top: 10px; }

.introjs-button:hover {
  border-color: #bcbcbc;
  text-decoration: none;
  box-shadow: 0px 1px 1px #e3e3e3; }

.introjs-button:focus,
.introjs-button:active {
  background-image: linear-gradient(#ececec, #f4f4f4); }

/* overrides extra padding on button elements in Firefox */
.introjs-button::-moz-focus-inner {
  padding: 0;
  border: 0; }

.introjs-skipbutton {
  margin-right: 5px;
  color: #7a7a7a; }

.introjs-prevbutton {
  border-radius: 0.2em 0 0 0.2em;
  border-right: none; }

.introjs-nextbutton {
  border-radius: 0 0.2em 0.2em 0; }

.introjs-disabled, .introjs-disabled:hover, .introjs-disabled:focus {
  color: #9a9a9a;
  border-color: #d4d4d4;
  box-shadow: none;
  cursor: default;
  background-color: #f4f4f4;
  background-image: none;
  text-decoration: none; }

.introjs-bullets {
  text-align: center; }

.introjs-bullets ul {
  clear: both;
  margin: 15px auto 0;
  padding: 0;
  display: inline-block; }

.introjs-bullets ul li {
  list-style: none;
  float: left;
  margin: 0 2px; }

.introjs-bullets ul li a {
  display: block;
  width: 6px;
  height: 6px;
  background: #ccc;
  border-radius: 10px;
  -moz-border-radius: 10px;
  -webkit-border-radius: 10px;
  text-decoration: none; }

.introjs-bullets ul li a:hover {
  background: #999; }

.introjs-bullets ul li a.active {
  background: #999; }

.introjs-progress {
  overflow: hidden;
  height: 10px;
  margin: 10px 0 5px 0;
  border-radius: 4px;
  background-color: #ecf0f1; }

.introjs-progressbar {
  float: left;
  width: 0%;
  height: 100%;
  font-size: 10px;
  line-height: 10px;
  text-align: center;
  background-color: #08c; }

.introjsFloatingElement {
  position: absolute;
  height: 0;
  width: 0;
  left: 50%;
  top: 50%; }

.accordions {
  margin-top: 20px; }
  .accordions dt {
    position: relative;
    padding-bottom: 20px;
    border-bottom: 1px solid #000;
    font-size: 22px;
    font-weight: 400;
    cursor: pointer; }
  .accordions dd + dt {
    margin-top: 20px; }
  .accordions dd {
    display: block !important;
    page-break-after: always; }

table {
  width: 100%; }
  table th {
    font-weight: 400;
    text-align: left; }
  table.styled td {
    padding: 22px 12px;
    border: 2px solid #474747;
    color: #333;
    font-size: 20px; }
    table.styled td:first-child {
      padding-left: 30px; }
    table.styled td:last-child {
      padding-right: 30px; }
    table.styled td.no-border-top {
      border-top: 0; }
    table.styled td.no-border-bottom {
      border-bottom: 0; }
    table.styled td.no-border {
      border: 0; }
    table.styled td.space-top {
      padding-top: 50px; }
    table.styled td.space-bottom {
      padding-bottom: 50px; }
    table.styled td.no-padding-top {
      padding-top: 0; }
  table.no-external-border td:first-child {
    border-left: 0; }
  table.no-external-border td:last-child {
    border-right: 0; }
  table.space-top {
    margin-top: 45px; }
  table.space-bottom {
    margin-bottom: 25px; }

.check-job-families .section + .section {
  margin-top: 2em; }

.check-job-families table {
  position: relative; }
  .check-job-families table thead:after {
    content: '';
    position: absolute;
    width: 100%;
    height: 7px;
    margin-top: -10px;
    background: url("../images/separator-big.png") no-repeat 0 100%; }
  .check-job-families table th {
    padding-bottom: 20px;
    font-weight: 400; }
    .check-job-families table th:not(:first-child) {
      padding-left: 10px; }
    .check-job-families table th:first-child {
      padding-left: 0; }
    .check-job-families table th:last-child {
      padding-left: 0;
      text-align: center; }
  .check-job-families table td {
    padding: 5px 30px 4px 0; }
    .check-job-families table td:last-child {
      padding-right: 0;
      text-align: center; }

.planning table th {
  font-weight: 700;
  vertical-align: top; }

.planning table td {
  padding: 10px;
  vertical-align: top; }

.fake-table {
  display: table;
  width: 100%;
  background: #e6e6e6;
  border-collapse: collapse; }
  .fake-table .table-head {
    display: table-header-group; }
    .fake-table .table-head .table-row:first-child .table-cell {
      border-top: 0; }
  .fake-table .table-body {
    display: table-row-group; }
    .fake-table .table-body:last-child .table-row:last-child .table-cell {
      padding-bottom: 30px;
      border-bottom: 0; }
    .fake-table .table-body .table-cell {
      border-width: 0 2px; }
  .fake-table .table-row {
    display: table-row; }
    .fake-table .table-row > div:not(.table-cell) {
      display: none; }
  .fake-table .table-cell {
    display: table-cell;
    width: 15%;
    padding: 12px;
    border: 2px solid #474747;
    vertical-align: middle; }
    .fake-table .table-cell:last-child {
      width: 9%;
      padding-right: 30px;
      border-right: 0; }
    .fake-table .table-cell.no-border {
      border: 0; }
    .fake-table .table-cell.no-border-top {
      border-top: 0; }
    .fake-table .table-cell.no-border-bottom {
      border-bottom: 0; }
    .fake-table .table-cell.radio-button-align {
      padding-top: 41px !important; }
    .fake-table .table-cell.no-padding {
      padding: 0 !important; }
    .fake-table .table-cell.border-top {
      border-top: 2px solid #474747 !important; }
  .fake-table .table-cell:first-child,
  .fake-table div:not(.table-cell) + .table-cell {
    width: 46%;
    padding-left: 30px;
    border-left: 0; }
  .fake-table.secondary .table-head .table-cell {
    padding-top: 42px;
    padding-bottom: 42px; }
  .fake-table.secondary .table-head .center {
    text-align: center; }
  .fake-table.secondary .table-body:last-child .table-row:last-child .table-cell {
    padding-bottom: 60px; }
  .fake-table.secondary .table-cell {
    width: 25%;
    padding: 12px; }
  .fake-table.secondary .table-cell:first-child,
  .fake-table.secondary div:not(.table-cell) + .table-cell {
    width: 50%;
    padding-left: 30px; }
  .fake-table.with-checkbox .table-cell {
    width: 8.5%;
    border: 0; }
    .fake-table.with-checkbox .table-cell:first-child {
      width: 49%;
      text-align: left; }
  .fake-table.tertiary {
    font-size: 14px; }
    .fake-table.tertiary .table-cell {
      padding: 12px;
      color: #333; }
    .fake-table.tertiary .table-head .table-cell {
      padding-bottom: 0; }
    .fake-table.tertiary .table-body:last-child .table-row:last-child .table-cell {
      padding-bottom: 12px; }
    .fake-table.tertiary .table-body .table-row .table-cell:first-child,
    .fake-table.tertiary .table-body .table-row div:not(.table-cell) + .table-cell {
      padding-left: 0; }
    .fake-table.tertiary .table-body .table-cell {
      border-top: 2px solid #474747; }
  .fake-table.border-top .table-head .table-row:first-child .table-cell {
    border-top: 2px solid #474747; }
  .fake-table.no-border .table-cell {
    border: 0; }
  .fake-table.long-input .table-cell {
    width: 23%; }
    .fake-table.long-input .table-cell:first-child {
      width: 65%; }
    .fake-table.long-input .table-cell:last-child {
      width: 12%; }
  .fake-table .sum-column {
    color: #808080; }
  .fake-table .sum-cell {
    color: #c6007b;
    font-size: 14px;
    font-weight: 700; }

.column-info {
  color: #808080 !important;
  font-size: 12px !important;
  font-weight: 700;
  text-transform: uppercase; }

.rows-info {
  color: #333 !important;
  font-size: 18px !important;
  font-weight: 700; }

table {
  width: 100%; }
  table th {
    font-weight: 400;
    text-align: left; }

.fake-table,
.main-table-container {
  background: none; }

.check-job-families table {
  position: relative; }
  .check-job-families table thead:after {
    content: '';
    position: absolute;
    width: 100%;
    height: 7px;
    margin-top: -10px; }
  .check-job-families table th {
    padding-bottom: 20px;
    font-weight: 400; }
    .check-job-families table th:not(:first-child) {
      padding-left: 10px; }
    .check-job-families table th:first-child {
      padding-left: 0; }
    .check-job-families table th:last-child {
      padding-left: 0;
      text-align: center; }
  .check-job-families table td {
    padding: 5px 30px 4px 0; }
    .check-job-families table td:last-child {
      padding-right: 0;
      text-align: center; }

.planning table + table {
  margin-top: 50px; }

.planning table th {
  font-weight: 700;
  vertical-align: top; }

.planning table td {
  padding: 10px;
  vertical-align: top; }

.planning table th,
.planning table td {
  padding: 10px;
  border: 1px solid #000; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
